// Lab_4.cpp 

#include <iostream>
#include <string>
using namespace std;

const int m = 419;
int Маt[419][419];
string Add(string a, string b) {
    int m = max(a.size(), b.size());
    for (int i = a.size(); i < m; i++)
    {
        a = "0" + a;
    }
    for (int i = b.size(); i < m; i++)
    {
        b = "0" + b;
    }
    string c = "";
    for (int i = 0; i < m; i++)
    {
        if (a[i] == b[i]) {
            c = c + "0";
        }
        else {
            c = c + "1";
        }
    }
    return c;
}

int Tr(string a) {
    int c = 0;
    for (int i = 0; i < m; i++)
    {
        if (a[i] == 1) {
            c++;
            c = c % 2;
        }
    }
    return c;
}

string Sq(string a) {
   char s = a[m - 1];
   a = a.erase(m - 1, 1);
   a = s + a;
    return a;
}

string Mult(string a, string b, int Mat[m][m]) {
    string c="";
    int n;
    string r="";
    for (int k = 0; k < m; k++)
    {


        c = "";
        for (int i = 0; i < m; i++)
        {
            n = 0;
            for (int j = 0; j < m; j++)
            {
                if (Mat[j][i] == 1 && a[j] == '1') {
                    n = ++n % 2;
                }
            }
            c = c + to_string(n);
        }
        n = 0;
        for (int i = 0; i < m; i++)
        {
            if (c[i] == '1' && b[i] == '1') {
                n = ++n % 2;
            }
        }
        r = r + to_string(n);
        char s = a[0];
        a = a.erase(0, 1);
        a = a+s;
        s = b[0];
        b = b.erase(0, 1);
        b = b + s;

    }
    return r;
}

string Inv(string a, int Mat[m][m]) {
    string d = a;
    for (int i = 1; i < m - 1; i++)
    {
        d = Sq(d);
        a = Mult(a, d, Mat);
    }
    a = Sq(a);
    return a;
}

string Ito(string a, int Mat[m][m]) {
    string p = "110100010";
    int t = p.size() - 1;
    string b = a;
    int k = 1;
 
    for (int i = t-1; i >=0 ; i--)
    {
        string w = b;
        for (int j = 0;  j < k;  j++)
        {
            w = Sq(w);
        }

        b = Mult(w, b, Mat);
        k = 2 * k;
        if (p[i] == '1') {
            b = Mult(Sq(b), a, Mat);
            k = k + 1;
        }
    }
    return Sq(b);
}

string Pow(string a, string b, int Mat[m][m]) {
    string o = "";
    for (int i = 0; i < m; i++)
    {
        o = o + "1";
    }
    reverse(b.begin(), b.end());
    for (int j = m-1; j >= 0; j--)
    {
        if (b[j] == '1') {
            o = Mult(a, o, Mat);
        }
        if (j != 0) {
            o = Sq(o);
        }
    }
    return o;
}


void EXPECT_EQ(const string A, string B, string TestName)
{
    cout << "TEST " << TestName << endl;
    if (A == B)
    {
        cout << "[ OK ] A equal B " << endl;
    }
    else
    {
        cout << "[ ERROR ] A not equal B " << endl;
    }
}

void AddTest(int Mat[419][419]) {

    string B("11100111010110010100011100111010001001111011111101110000010111010000001110011011011100101011110011101101110100110001101110110011101010110011100111001101101100010010010010100011111111010101011000011010110010111000001100010011101010110010010010000011001010111101000000100010100000001001110000110011100011111011000101111011100010001111110001111111000000000011110001010111101100010011011110100000011110100011111001111111000");

    string A("10011010101001110111110001010001011000000101010110011000010000010011011000111000001110000000010000111111100111101100010111000111100111010001101101110100101111110000100111010101110000111111011011000100111010010110100100100101000001010101101101100011011101110010101100111010011101100000001010100111010110000101101000101101100001001111100000001010101000110100111110110100100011100010101111101010010011100111111001010101101");
    string C("11011010101000010101000011011001010001101101101111101001111001100011000001001010010111110110111010101010110010010010000001101110000001110111011101110011001010111111011010010000100000001100001100101100111111101011000111100111100111110101010111010101101001100010001111100111001000100000111101001011001100010101001100111000001110110110110001011110011000101101000101101101000110010110010001100001110100001001111001001111111");
    string D, M, L, K, N;

    L = Add(A, B);
    D = Mult(L, C, Mat);
    M = Mult(B, C, Mat);
    K = Mult(C, A, Mat);
    N = Add(M, K);

    EXPECT_EQ(D, N, "AddTest");
}

void SecondTest(int Mat[419][419]) {
    string A("10011010101001110111110001010001011000000101010110011000010000010011011000111000001110000000010000111111100111101100010111000111100111010001101101110100101111110000100111010101110000111111011011000100111010010110100100100101000001010101101101100011011101110010101100111010011101100000001010100111010110000101101000101101100001001111100000001010101000110100111110110100100011100010101111101010010011100111111001010101101");
    string v = "";
    string N;

    for (int i = 0; i < m; i++)
    {
        v = v + "1";
    }
    
    N = Pow(A, v, Mat);
    EXPECT_EQ( v, N, "SecondTest");
}

int main()
{
    int f[m];
    f[0] = 1;
    int g = 2 * m + 1;
    for (int i = 1; i < m; i++)
    {
        f[i] = 2 * f[i - 1] % g;
    }
    int Mat[m][m];
    for (int i = 0; i < m; i++)
    {
        for (int j = i; j < m; j++)
        {
            if ((f[i]-f[j]+g)%g==1 || (f[j]-f[i]+g)%g==1)
            {
                Mat[i][j] = 1;
                Mat[j][i] = 1;
            }
            else if ((f[i] + f[j]) % g == 1 || (-f[i] - f[j]+2*g) % g == 1) {
                Mat[i][j] = 1;
                Mat[j][i] = 1;
            }
            else {
                Mat[i][j] = 0;
                Mat[j][i] = 0;
            }
        }
    }
    string a, b, c, n;
    a = "10100110000000001110001111100001111011011110101101010101000100110011001011011011001001010000000101110111100000100100111010111001001010001011010000010010100101111010001001111110101000010111100111000000000001111010110010000000100100000000111110110111111100000111111111100010110101110111010110111000001001010000110101000101101011010000011101011001011001011010010110100000111101101011111111011100100001101101100100100100001";
    b = "10010111111101100010010011111001100011101001110110010101010001001111101000111111010101110100001011111101101101111100100011100011001100000110001100001001101100010100101000011110110010000010111001010100011111100010000111111011111111010101001111101011001100000000010011110111111000111011111100111010101001010001011110001101000011001000001001000100001110011101011001111101101111110010100010101010101000001001100001000110101";
    n = "01010100110010010110101000010001001110010010110001001010000010011100000101000100110100110110101100011110000011101101100010011010100100100111001100011001100110000001010111001100011011110111111001100101000111100110111101111011000100001101111101111110110010011100011001110101100001111100111011001000001110010010100110001111101101000001011101000011111000010111110011110010101001111111101001100110010101010000000000111001101";
  /*  cout << "Lab_4" << endl;
   cout << "A+B = " << Add(a, b) << endl;
   cout << "Trace : "<< Tr(a)<<endl;
   cout << "A^2= "<<Sq(a) << endl;
   cout <<"A*B = "<< Mult(a, b, Mat)<<endl;
   cout << "A^N = " << Pow(a, n, Mat) << endl;
   cout << "A^(-1)= "<< Inv(a, Mat) << endl;
  // cout <<"A^(-1)= "<< Ito(a, Mat) << endl;
  */
   AddTest(Mat);
   SecondTest(Mat);
}

